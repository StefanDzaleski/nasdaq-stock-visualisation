{"version":3,"sources":["hoc/Aux/Aux.js","components/Chart/ChartOptions.js","config.js","enums/TimeSeries.js","enums/CompanyLineNumber.js","services/ParseData.js","components/Chart/Chart.js","enums/CompanyList.js","enums/Interval.js","components/FormWrapper/Dropdowns/Dropdowns.js","components/FormWrapper/ChosenValue/ChosenValue.js","components/FormWrapper/OptionsButtons/OptionButtons.js","components/FormWrapper/Checkboxes/Checkboxes.js","components/FormWrapper/RadioButtons/RadioButtons.js","components/FormWrapper/FormWrapper.js","containers/ChartBuilder/ChartBuilder.js","services/Backend.js","hoc/Layout/Layout.js","components/Info/Info.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","chartOptions","rangeSelector","selected","title","text","series","API_KEY","TimeSeriesEnum","Intraday","Daily","Weekly","Monthly","TimeSeries","label","value","TimeSeriesLabel","TIME_SERIES_DAILY","TIME_SERIES_WEEKLY","TIME_SERIES_MONTHLY","CompanyLineNumberEnum","SingleCompany","MultipleCompanies","SingleLine","MultiLine","getSingleLine","data","companyLineNumber","newData","singleLineData","Object","entries","map","item","Date","getTime","parseFloat","sort","a","b","push","Promise","resolve","getMultipleLines","values","forEach","Chart","react_default","createElement","highcharts_react_min_default","highcharts","Highcharts","options","this","constructorType","Component","CompanyList","Interval","Option","Select","dropdowns","className","multipleCompanies","es_select","mode","placeholder","onChange","multipleCompaniesChanged","name","element","key","companyChanged","timeSeriesChanged","timeSeries","defaultValue","intervalChanged","chosenValue","optionButtons","buttons","showButtons","textValue","onClick","click","clickValue","ChosenValue_ChosenValue","firstValueTrue","Aux","es","type","ease","duration","delay","checkboxes","es_checkbox","Group","lineOptions","lineOptionsChosen","radioButtons","es_radio","lineOptionChosen","formWrapper","singleLine","RadioButtons_RadioButtons","Checkboxes_Checkboxes","OptionsButtons_OptionButtons","singleCompany","multiLine","Dropdowns_Dropdowns","ChartBuilder","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","companyLineNumberHandler","setState","defineProperty","companyChangedHandler","company","timeSeriesChangedHandler","intervalChangedHandler","interval","console","log","event","lineOption","target","multipleComapniesChangedHandler","companies","resetForm","url","generatingChart","generateChart","state","axios","get","then","response","filteredResponse","config","Array","isArray","newOptions","objectSpread","i","length","lineData","tooltip","valueDecimals","promises","reject","all","Backend","FormWrapper_FormWrapper","components_Chart_Chart","layout","containers_ChartBuilder_ChartBuilder","info","header","react_router_dom","to","App","react_router","component","Header","exact","path","Layout","Info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c749c72.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","export const chartOptions = {\n    rangeSelector: {\n        selected: 1\n    },\n\n    title: {\n        text: 'AAPL Stock Price'\n    },\n\n    series: []\n}","export const API_KEY = 'BQZK8LNIDB3J068Y';","export const TimeSeriesEnum = {\n    Intraday: 'TIME_SERIES_INTRADAY',\n    Daily: 'TIME_SERIES_DAILY',\n    Weekly: 'TIME_SERIES_WEEKLY',\n    Monthly: 'TIME_SERIES_MONTHLY'\n}\n\nexport const TimeSeries = [\n    {label: 'Intraday', value: TimeSeriesEnum.Intraday},\n    {label: 'Daily', value: TimeSeriesEnum.Daily},\n    {label: 'Weekly', value: TimeSeriesEnum.Weekly},\n    {label: 'Monthly', value: TimeSeriesEnum.Monthly},\n]\n\nexport const TimeSeriesLabel = {\n    'TIME_SERIES_DAILY': 'Daily',\n    'TIME_SERIES_WEEKLY': 'Weekly',\n    'TIME_SERIES_MONTHLY': 'Monthly'\n}\n\n","export const CompanyLineNumberEnum = {\n    SingleCompany: 'singleCompany',\n    MultipleCompanies: 'multipleCompanies',\n    SingleLine: 'singleLine',\n    MultiLine: 'multiLine'\n}","import { CompanyLineNumberEnum } from '../enums/CompanyLineNumber';\n\nexport function getSingleLine(data, value, companyLineNumber) {\n    //Replaces the key with a timestamp and gets only one value from the object \n    let newData = [];\n    let singleLineData = Object.entries(data).map(item => {\n        let itemData = {};\n        let itemDate = new Date(item[0]).getTime();\n        let itemValue = parseFloat(item[1][value]);\n        itemData = [itemDate, itemValue];\n        return itemData;\n    });\n\n    singleLineData = singleLineData.sort((a, b) => {\n        return a[0] - b[0];\n    });\n    if (companyLineNumber === CompanyLineNumberEnum.SingleCompany) {\n        newData.push(singleLineData);\n        return Promise.resolve(newData);\n    } \n    return Promise.resolve(singleLineData);\n}\n\nexport function getMultipleLines(data, values) {\n    let newData = [];\n    values.forEach(value => {\n        let singleLineData = Object.entries(data).map(item => {\n            let itemData = {};\n            let itemDate = new Date(item[0]).getTime();\n            let itemValue = parseFloat(item[1][value]);\n            itemData = [itemDate, itemValue];\n            return itemData;\n        });\n\n        singleLineData = singleLineData.sort((a, b) => {\n            return a[0] - b[0];\n        });\n        newData.push(singleLineData);\n    });\n\n    return Promise.resolve(newData);\n}\n\n// export function getSingleLineForCompanies(data, value) {\n//     let singleLineData = Object.entries(data).map(item => {\n//         let itemData = {};\n//         let itemDate = new Date(item[0]).getTime();\n//         let itemValue = parseFloat(item[1][value]);\n//         itemData = [itemDate, itemValue];\n//         return itemData;\n//     });\n\n//     singleLineData = singleLineData.sort((a, b) => {\n//         return a[0] - b[0];\n//     });\n//     return Promise.resolve(singleLineData);\n// }\n\nexport function formatData(data) {\n\n}","import React, {Component} from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport './Chart.scss';\n\nclass Chart extends Component{\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     if (nextProps.url !== this.props.url) {\n    //         return true;\n    //     }\n    //     return false;\n    // }\n\n    render() {    \n        return (\n            <HighchartsReact\n            highcharts={Highcharts}\n            options={this.props.options}\n            constructorType = { 'stockChart' }\n            />\n            );\n        }\n}\n\nexport default Chart;","export const CompanyList = [\n    {label: 'American Airlines Group, Inc.', value: 'AAL'},\n    {label: 'Apple Inc.', value: 'AAPL'},\n    {label: 'Adobe Inc.', value: 'ADBE'},\n    {label: 'Analog Devices, Inc.', value: 'ADI'},\n    {label: 'Automatic Data Processing, Inc.', value: 'ADP'}\n]","export const Interval = [\n    {label: '1 minute', value: '1min'},\n    {label: '5 minutes', value: '5min'},\n    {label: '15 minutes', value: '15min'},\n    {label: '30 minutes', value: '30min'},\n    {label: '60 minutes', value: '60min'}\n]","import React from 'react';\nimport { Select } from 'antd';\nimport { CompanyList } from '../../../enums/CompanyList';\nimport { TimeSeries, TimeSeriesEnum } from '../../../enums/TimeSeries';\nimport { Interval } from '../../../enums/Interval';\nimport './Dropdowns.scss';\n\nconst { Option } = Select;\n\nconst dropdowns = (props) => {\n    return (\n        <div className=\"Dropdowns-div\">\n            {\n                props.multipleCompanies ?\n                    <Select className=\"Dropdown\" mode=\"multiple\" placeholder=\"Select a company\" onChange={props.multipleCompaniesChanged} name=\"company\">\n                        {CompanyList.map(element => {\n                            return (\n                                <Option className=\"Option\" key={element.value} value={element.value}>{element.label}</Option>\n                            );\n                        })}\n                    </Select> :\n                    <Select className=\"Dropdown\" placeholder=\"Select a company\" onChange={props.companyChanged} name=\"company\">\n                        {CompanyList.map(element => {\n                            return (\n                                <Option key={element.value} value={element.value}>{element.label}</Option>\n                            );\n                        })}\n                    </Select>\n            }\n\n            <Select className=\"Dropdown\" placeholder=\"Select a time series\" onChange={props.timeSeriesChanged} name=\"timeSeries\">\n                {TimeSeries.map(element => {\n                    return (\n                        <Option key={element.value} value={element.value}>{element.label}</Option>\n                    );\n                })}\n            </Select>\n\n            {\n                props.timeSeries === TimeSeriesEnum.Intraday ?\n                    <Select className=\"Dropdown\" defaultValue=\"1min\" placeholder=\"Select an interval\" onChange={props.intervalChanged} name=\"interval\">\n                        {Interval.map(element => {\n                            return (\n                                <Option key={element.value} value={element.value}>{element.label}</Option>\n                            );\n                        })}\n                    </Select> :\n                    null\n            }\n\n        </div>\n    );\n}\n\nexport default dropdowns;","import React from 'react';\nimport './ChosenValue.scss';\n\nconst chosenValue = (props) => {\n    return(\n        <div className=\"Chosen-value-wrapper\">\n            {props.children}\n        </div>\n    );\n}\n\nexport default chosenValue;","import React from 'react';\nimport './OptionButtons.scss';\nimport Aux from '../../../hoc/Aux/Aux';\nimport QueueAnim from 'rc-queue-anim';\nimport ChosenValue from '../ChosenValue/ChosenValue';\n\nconst optionButtons = (props) => {\n\n    const buttons = (\n        props.showButtons ?\n            null :\n            <div className=\"Option-buttons-wrapper\" key=\"firstKey\">\n                {props.values.map(value => {\n                    return (\n                            <div className=\"Custom-button\" key={value.textValue} onClick={() => props.click(value.clickValue)}>\n                                {value.textValue}\n                                <div className=\"Button-line\"></div>\n                            </div>\n                    );\n                })}\n            </div>\n    );\n\n    const placeholder = (\n        props.showButtons ?\n            <ChosenValue key=\"secondKey\">\n                {props.firstValueTrue ? props.values[0].textValue : props.values[1].textValue}\n            </ChosenValue> :\n            null\n    );\n\n    return (\n        <Aux>\n            <QueueAnim\n                className=\"fade-out-content\"\n                key=\"fade-out-key\"\n                type={['right', 'left']}\n                ease={['easeOutQuart', 'easeInOutQuart']}\n                duration={1000}>\n                {\n                    buttons\n                }\n            </QueueAnim>\n            <QueueAnim className=\"fade-in-content\"\n                key=\"fade-in-key\"\n                type={['right', 'left']}\n                ease={['easeOutQuart', 'easeInOutQuart']}\n                delay={1000}\n                duration={1000}>\n                {\n                    placeholder\n                }\n            </QueueAnim>\n        </Aux>\n    );\n}\n\nexport default optionButtons;","import React from 'react';\nimport { Checkbox } from 'antd';\nimport './Checkboxes.scss';\n\nconst checkboxes = (props) => {\n    return (\n        <div className=\"Checkboxes-wrapper\">\n            <Checkbox.Group options={props.lineOptions} onChange={props.lineOptionsChosen} />\n        </div>\n    );\n}\n\nexport default checkboxes;","import React from 'react';\nimport { Radio } from 'antd';\nimport './RadioButtons.scss'\n\nconst radioButtons = (props) => {\n    return (\n        <div className=\"Radio-buttons-wrapper\">\n            <Radio.Group options={props.lineOptions} onChange={props.lineOptionChosen} />\n        </div>\n    );\n}\n\nexport default radioButtons;","import React from 'react';\nimport './FormWrapper.css';\nimport Dropdowns from './Dropdowns/Dropdowns';\nimport OptionButtons from './OptionsButtons/OptionButtons';\nimport Checkboxes from './Checkboxes/Checkboxes';\nimport RadioButtons from './RadioButtons/RadioButtons';\nimport Aux from '../../hoc/Aux/Aux';\nimport { CompanyLineNumberEnum } from '../../enums/CompanyLineNumber';\n\nconst formWrapper = (props) => {\n\n    const options = (\n        props.singleLine || props.multipleCompanies ?\n            <RadioButtons\n                lineOptions={props.lineOptions}\n                lineOptionChosen={props.lineOptionChosen}\n            /> :\n            <Checkboxes\n                lineOptions={props.lineOptions}\n                lineOptionsChosen={props.lineOptionsChosen} />\n    )\n\n    return (\n        <div className=\"Form-wrapper\">\n            <OptionButtons\n                showButtons={props.singleCompany || props.multipleCompanies}\n                click={props.companyLineNumber}\n                values={\n                    [{ textValue: 'Single Company', clickValue: CompanyLineNumberEnum.SingleCompany },\n                    { textValue: 'Multiple Companies', clickValue: CompanyLineNumberEnum.MultipleCompanies }]\n                }\n                firstValueTrue={props.singleCompany}\n            />\n            {\n                props.singleCompany ?\n                    <OptionButtons\n                        showButtons={props.singleLine || props.multiLine}\n                        click={props.companyLineNumber}\n                        values={\n                            [{ textValue: 'Single Line', clickValue: CompanyLineNumberEnum.SingleLine },\n                            { textValue: 'Multiple Lines', clickValue: CompanyLineNumberEnum.MultiLine }]\n                        }\n                        firstValueTrue={props.singleLine}\n                    /> :\n                    null\n            }\n            {\n                props.singleLine || props.multiLine || props.multipleCompanies ?\n                    <Aux>\n                        {options}\n                        <Dropdowns\n                            companyChanged={props.companyChanged}\n                            timeSeriesChanged={props.timeSeriesChanged}\n                            intervalChanged={props.intervalChanged}\n                            timeSeries={props.timeSeries}\n                            multipleCompanies={props.multipleCompanies}\n                            multipleCompaniesChanged={props.multipleCompaniesChanged}\n                        />\n                    </Aux> :\n                    null\n            }\n        </div>\n    );\n}\n\nexport default formWrapper;","import React, { Component } from 'react';\nimport { chartOptions } from '../../components/Chart/ChartOptions';\nimport * as Backend from './../../services/Backend';\nimport Aux from '../../hoc/Aux/Aux';\nimport Chart from './../../components/Chart/Chart';\nimport './ChartBuilder.scss';\nimport QueueAnim from 'rc-queue-anim';\nimport FormWrapper from '../../components/FormWrapper/FormWrapper';\n\nconst lineOptions = [\n    { label: 'Open', value: '1. open' },\n    { label: 'High', value: '2. high' },\n    { label: 'Low', value: '3. low' },\n    { label: 'Close', value: '4. close' },\n    { label: 'Volume', value: '5. volume' }\n];\n\nclass ChartBuilder extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chartOptions: null,\n            url: null,\n            singleCompany: false,\n            multipleCompanies: false,\n            singleLine: false,\n            multiLine: false,\n            company: null,\n            companies: null,\n            timeSeries: null,\n            interval: null,\n            lineOption: null,\n            lineOptions: null,\n            generatingChart: false\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    // }\n\n    companyLineNumberHandler = (type) => {\n        this.setState({ [type]: true });\n    }\n\n    companyChangedHandler = (value) => {\n        this.setState({ company: value });\n    }\n\n    timeSeriesChangedHandler = (value) => {\n        this.setState({ timeSeries: value });\n    }\n\n    intervalChangedHandler = (value) => {\n        this.setState({ interval: value });\n    }\n\n    lineOptionsChosen = (values) => {\n        console.log('values', values);\n        this.setState({\n            lineOptions: values\n        });\n    }\n\n    lineOptionChosen = (event) => {\n        this.setState({\n            lineOption: event.target.value\n        });\n    }\n\n    multipleComapniesChangedHandler = (values) => {\n        this.setState({\n            companies: values\n        });\n    }\n\n    resetForm = () => {\n        this.setState({\n            chartOptions: null,\n            url: null,\n            singleCompany: false,\n            multipleCompanies: false,\n            singleLine: false,\n            multiLine: false,\n            company: null,\n            companies: null,\n            timeSeries: null,\n            interval: null,\n            lineOption: null,\n            lineOptions: null,\n            generatingChart: false\n        });\n    }\n\n    generateChart = () => {\n        console.log('state', this.state);\n        this.setState({\n            generatingChart: true\n        });\n        if ((this.state.company === null && this.state.companies === null) || this.state.timeSeries === null) {\n            return;\n        }\n\n        if (this.state.singleCompany) {\n            Backend.getSingleCompanyData(this.state.company, this.state.interval, this.state.timeSeries, this.state.lineOption ? this.state.lineOption : this.state.lineOptions)\n                .then(response => {\n                    let newOptions = { ...chartOptions };\n                    let series = [];\n                    for (let i = 0; i < response.length; i++) {\n                        let lineData =\n                        {\n                            name: 'Test series ' + i,\n                            data: response[i],\n                            tooltip: {\n                                valueDecimals: 2\n                            }\n                        }\n                        series.push(lineData);\n                    }\n                    newOptions.series = series;\n                    this.setState({ chartOptions: newOptions });\n                });\n        } else {\n            Backend.getMultiCompanyData(this.state.companies, this.state.interval, this.state.timeSeries, this.state.lineOption).then(response => {\n                let newOptions = { ...chartOptions };\n                let series = [];\n                for (let i = 0; i < response.length; i++) {\n                    let lineData =\n                    {\n                        name: 'Test series ' + i,\n                        data: response[i],\n                        tooltip: {\n                            valueDecimals: 2\n                        }\n                    }\n                    series.push(lineData);\n                }\n                newOptions.series = series;\n                this.setState({ chartOptions: newOptions });\n            })\n        }\n    }\n\n    render() {\n        return (\n            <Aux>\n                <FormWrapper\n                    companyChanged={this.companyChangedHandler}\n                    timeSeriesChanged={this.timeSeriesChangedHandler}\n                    intervalChanged={this.intervalChangedHandler}\n                    singleCompany={this.state.singleCompany}\n                    multipleCompanies={this.state.multipleCompanies}\n                    singleLine={this.state.singleLine}\n                    multiLine={this.state.multiLine}\n                    companyLineNumber={this.companyLineNumberHandler}\n                    timeSeries={this.state.timeSeries}\n                    lineOptions={lineOptions}\n                    lineOptionChosen={this.lineOptionChosen}\n                    lineOptionsChosen={this.lineOptionsChosen}\n                    multipleCompaniesChanged={this.multipleComapniesChangedHandler}\n                    generatingChart={this.state.generatingChart}\n                />\n                <QueueAnim\n                    className=\"fade-out-content\"\n                    key=\"fade-out-key\"\n                    type={['right', 'left']}\n                    ease={['easeOutQuart', 'easeInOutQuart']}\n                    duration={1000}>\n                    {\n                        (this.state.company || this.state.companies) && this.state.timeSeries && (this.state.lineOption || this.state.lineOptions) ?\n                            <div className=\"Generate-button-div\" key=\"button-key\">\n                                <div className=\"Generate-button\" onClick={this.generateChart}>Generate chart</div>\n                            </div> :\n                            null\n                    }\n                </QueueAnim>\n                {\n                    this.state.chartOptions ?\n                        <Aux>\n                            <div className=\"Chart-wrapper\">\n                                <Chart\n                                    options={this.state.chartOptions}\n                                    url={this.state.url}\n                                />\n                            </div>\n                            <div className=\"Reset-button-wrapper\">\n                                <div className=\"Reset-button\" onClick={this.resetForm}>Reset form</div>\n                            </div>\n                        </Aux> :\n                        null\n                }\n            </Aux>\n        );\n    }\n}\n\nexport default ChartBuilder;\n","import axios from 'axios';\nimport { API_KEY } from '../config';\nimport { TimeSeriesEnum, TimeSeriesLabel } from '../enums/TimeSeries';\nimport { getSingleLine, getMultipleLines } from './ParseData';\nimport { CompanyLineNumberEnum } from '../enums/CompanyLineNumber';\n\nexport function getSingleCompanyData(company, interval, timeSeries, values) {\n    if (timeSeries === TimeSeriesEnum.Intraday) {\n        return Promise.resolve(\n            axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=' + company + '&interval=' + interval + '&apikey=' + API_KEY).then(response => {\n                const filteredResponse = {url: response.config.url, data: response.data['Time Series (' + interval + ')']};\n                if (Array.isArray(values)) {\n                    return getMultipleLines(filteredResponse.data, values).then(response => {\n                        return response;\n                    });\n                } else {\n                    return getSingleLine(filteredResponse.data, values, CompanyLineNumberEnum.SingleCompany).then(response => {\n                        return response;\n                    })\n                }\n            })\n        );\n    } else {\n        return Promise.resolve(\n            axios.get('https://www.alphavantage.co/query?function=' + timeSeries + '&symbol=' + company + '&apikey=' + API_KEY).then(response => {\n                const filteredResponse = {\n                    url: response.config.url, \n                    data: response.data[timeSeries === TimeSeriesEnum.Daily ? 'Time Series (' + TimeSeriesLabel[timeSeries] + ')' : TimeSeriesLabel[timeSeries] + ' Time Series']\n                };\n                if (Array.isArray(values)) {\n                    return getMultipleLines(filteredResponse.data, values).then(response => {\n                        return response;\n                    });\n                } else {\n                    return getSingleLine(filteredResponse.data, values, CompanyLineNumberEnum.SingleCompany).then(response => {\n                        return response;\n                    })\n                }\n            })\n        );\n    }\n}\n\nexport function getMultiCompanyData(companies, interval, timeSeries, values) {\n    let promises = [];\n;    if (timeSeries === TimeSeriesEnum.Intraday) {\n        companies.forEach(company => {\n            promises.push(new Promise((resolve, reject) => {\n                axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=' + company + '&interval=' + interval + '&apikey=' + API_KEY).then(response => {\n                    const filteredResponse = {url: response.config.url, data: response.data['Time Series (' + interval + ')']};\n                        getSingleLine(filteredResponse.data, values, CompanyLineNumberEnum.MultipleCompanies).then(response => {\n                            resolve(response);\n                        })               \n                })\n            }))\n        });\n        return Promise.all(promises);\n    } else {\n        companies.forEach(company => {\n            promises.push(new Promise((resolve, reject) => {\n                axios.get('https://www.alphavantage.co/query?function=' + timeSeries + '&symbol=' + company + '&apikey=' + API_KEY).then(response => {\n                console.log('backend data', response);    \n                const filteredResponse = {\n                        url: response.config.url, \n                        data: response.data[timeSeries === TimeSeriesEnum.Daily ? 'Time Series (' + TimeSeriesLabel[timeSeries] + ')' : TimeSeriesLabel[timeSeries] + ' Time Series']\n                    };\n                        getSingleLine(filteredResponse.data, values, CompanyLineNumberEnum.MultipleCompanies).then(response => {\n                            resolve(response);\n                        })               \n                })\n            }))\n        });\n        return Promise.all(promises);\n    }\n}\n\n","import React from 'react';\n\nimport Aux from '../Aux/Aux';\nimport ChartBuilder from '../../containers/ChartBuilder/ChartBuilder';\nimport { Route } from 'react-router-dom';\n\nconst layout = (props) => {\n\n    return (\n        <Aux>\n            <ChartBuilder />\n        </Aux>\n    );\n}\n\nexport default layout;","import React from 'react';\nimport Aux from '../../hoc/Aux/Aux';\n\nconst info = (props) => {\n    return(\n        <Aux>jnkjnjk</Aux>\n    );\n}\n\nexport default info;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.scss';\n\nconst header = (props) => {\n    return (\n        <div className=\"Header-wrapper\">\n            <div className=\"Header-info\">\n                NASDAQ Stock Visualisation\n            </div>\n            <div className=\"Header-buttons-wrapper\">\n                <Link to=\"/\"><div className=\"Header-button\">Chart Generator</div></Link>\n                <Link to=\"/nasdaq-info\"><div className=\"Header-button Coral\">NASDAQ Info</div></Link>\n            </div>\n        </div>\n    );\n}\n\nexport default header;","import React, { Component } from 'react';\nimport Layout from './hoc/Layout/Layout';\nimport './App.scss';\nimport 'antd/dist/antd.css'\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Info from './components/Info/Info';\nimport Header from './components/Header/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Route component={Header} />\n        <Route exact path=\"/\" component={Layout} />\n        <Route path=\"/nasdaq-info\" component={Info} />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}